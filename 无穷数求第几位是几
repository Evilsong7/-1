/*链接：https://ac.nowcoder.com/acm/contest/624/C?&headNav=acm
来源：牛客网

题目描述




  ∞, the infinity. It's one of the most complex math symbols. How does it mean? The mathematicians argued for many years. But luckily, the principle of infinity is stable now.        Ramen is doing some boring works on a kind of number string SnSn. To produce SnSn, write down all numbers from 1 to n in ascending order, then concatenate them directly. For example, S7=1234567S7=1234567 and S15=123456789101112131415S15=123456789101112131415.         Especially, the infinity number string is: S∞=12345678910111213⋯S∞=12345678910111213⋯.      Ramen likes infinity, but he is bad at counting. He wants to know what the digit is at the position p in the infinity number string S∞S∞. Can you help him to solve this complex problem?
输入描述:
The input contains multiple test cases.The first line is an integer T(1 <= T <= 100000), which represents the number of test cases.Each of the next T lines contains an integer p(1 <= p <= 1e18), represents the position has been asked.
输出描述:
For each test case, output the digit at position p in S∞S∞ in one single line.


示例1



输入
复制

5
1
10
19
66
1000000000000000000



输出
复制

1
1
4
3
3

*/
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <iostream>
using namespace std;
ll a[50], b[50];
void init(){
    a[1] = 0, a[2] = 10;
    for(int i = 3; i <= 20; i++) a[i] = a[i-1]*10;
    b[1] = 9;
    for(int i = 2; i <= 19; i++) b[i] = (a[i+1] - a[i])*i;
}
 

 
int main(){
    init();
    int t;
    cin >> t;
    while(t--){
        //dapdjpasdjpoajdpoajd
        long long n;
        scanf("%lld", &n);
        if(n <= 9) {printf("%lld\n", n); continue;}
        ll tmp = n, len = 1;
        while(1){//dasdnoasdnoiandoadaoidnadada
            if(tmp - b[len] <= 0) break;
            tmp -= b[len];
            len++;
        }
        //sdosdnaoindasd
        ll x = tmp/len, y = tmp%len;
        if(y == 0) x--, y = len;
        y = len-y+1;
        ll m = a[len] + x;
        while(y){
            y--;//dklfnslfnldnflsfsdf
            if(y == 0) printf("%d\n", m%10);
            m /= 10;
        }
    }
    return 0;
}
